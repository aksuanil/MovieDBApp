{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\An\\u0131l AKSU\\\\Desktop\\\\MovieDBApp\\\\client\\\\src\\\\HomePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Header from \"./components/Header\";\nimport { QueryClient, QueryClientProvider, useQuery } from \"react-query\";\nimport MovieGrid from \"./components/MovieGrid\";\nimport CategoryBar from \"./components/CategoryBar\";\nimport { useParams } from \"react-router-dom\";\nimport Loader from \"./components/Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage() {\n  _s();\n\n  const fetchPopular = async () => {\n    const response = await fetch(\"/main\");\n    return response.json();\n  };\n\n  const {\n    data,\n    status\n  } = useQuery('popular', fetchPopular);\n  const [id, setData] = useState(27);\n  const [page, setPage] = useState('popular');\n\n  const getGenreId = genreId => {\n    setData(genreId);\n    setPage(\"others\");\n  };\n\n  const fetchGenre = async id => {\n    const response = await fetch(`movies/getMoviesByGenre/${id}`);\n    console.log(response);\n    return response.json();\n  };\n\n  const [movie, setMovie] = useState(0);\n  setMovie(fetchGenre(id));\n  console.log(id);\n  console.log(fetchGenre());\n  const teamsQuery = useQuery('genre', () => fetchGenre(id));\n  console.log(teamsQuery.data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-slate-300\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(CategoryBar, {\n      getGenreId: getGenreId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this), status === 'loading' && page === 'popular' && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }, this), status === 'error' && page === 'popular' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }, this), status === 'success' && page === 'popular' && /*#__PURE__*/_jsxDEV(MovieGrid, {\n      data: data.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this), teamsQuery.status === 'loading' && page === 'others' && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }, this), teamsQuery.status === 'error' && page === 'others' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }, this), teamsQuery.status === 'success' && page === 'others' && /*#__PURE__*/_jsxDEV(MovieGrid, {\n      data: teamsQuery.data.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HomePage, \"xVgLHjXd/FLLEgFpVEClucz4juY=\", false, function () {\n  return [useQuery, useQuery];\n});\n\n_c = HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/AnÄ±l AKSU/Desktop/MovieDBApp/client/src/HomePage.js"],"names":["React","useEffect","useState","useCallback","Header","QueryClient","QueryClientProvider","useQuery","MovieGrid","CategoryBar","useParams","Loader","HomePage","fetchPopular","response","fetch","json","data","status","id","setData","page","setPage","getGenreId","genreId","fetchGenre","console","log","movie","setMovie","teamsQuery"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport { QueryClient, QueryClientProvider, useQuery } from \"react-query\"\r\nimport MovieGrid from \"./components/MovieGrid\";\r\nimport CategoryBar from \"./components/CategoryBar\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Loader from \"./components/Loader\";\r\n\r\nexport default function HomePage() {\r\n  const fetchPopular = async ()=> {\r\n  const response = await fetch(\"/main\");\r\n  return response.json();\r\n}\r\n  const {data, status} = useQuery('popular', fetchPopular);\r\n\r\n\r\n  const [id, setData] = useState(27);\r\n  const [page, setPage] = useState('popular')\r\n\r\n  const getGenreId = (genreId) => {\r\n    setData(genreId);\r\n    setPage(\"others\")\r\n}\r\n\r\n  const fetchGenre = async (id)=> {\r\n    const response = await fetch(`movies/getMoviesByGenre/${id}`);\r\n    console.log(response)\r\n\r\n    return response.json();\r\n  }\r\n\r\n  const [movie, setMovie] = useState(0)\r\n  setMovie(fetchGenre(id))\r\n\r\n  console.log(id)\r\n  console.log(fetchGenre())\r\n\r\nconst teamsQuery = useQuery('genre',  () => fetchGenre(id))\r\nconsole.log(teamsQuery.data)\r\n\r\n\r\n    return (\r\n    <div className=\"bg-slate-300\">\r\n          <Header/>\r\n          <CategoryBar getGenreId={getGenreId}/>\r\n          \r\n            {status === 'loading' && page === 'popular' && (\r\n              <Loader/>\r\n            )}\r\n            {status === 'error' && page === 'popular'  && (\r\n              <div>Error fetching data</div>\r\n            )}\r\n            {status === 'success' && page === 'popular' && (\r\n              <MovieGrid data={data.data}/>\r\n            )}\r\n\r\n            {teamsQuery.status === 'loading' && page === 'others' && (\r\n              <Loader/>\r\n            )}\r\n            {teamsQuery.status === 'error' && page === 'others' && (\r\n              <div>Error fetching data</div>\r\n            )}\r\n            {teamsQuery.status === 'success' && page === 'others' && (\r\n              <MovieGrid data={teamsQuery.data.data}/>\r\n            )}\r\n          {/* <MovieGrid data={genreId}/> */}\r\n    </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}